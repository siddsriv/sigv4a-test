import { SignatureV4Base, SignatureV4CryptoInit, SignatureV4Init } from "@smithy/signature-v4";
import { HttpRequest, RequestSigner } from "@smithy/types";
/**
 * @public
 */
export declare class SignatureV4a extends SignatureV4Base implements RequestSigner {
    /**
     * Creates a SigV4a signer
     * @param applyChecksum Apply checksum header
     * @param credentials Credentials to use when signing
     * @param region Region to sign for, Wildcard (*) also accepted
     * @param service Service to sign for
     * @param uriEscapePath Defaults to true. Used for non s3 services.
     */
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath, }: SignatureV4Init & SignatureV4CryptoInit);
    /**
     * Sign a request using SigV4a
     * @param toSign HttpRequest to sign
     * @param options Additional options
     */
    sign(toSign: HttpRequest, options: any): Promise<any>;
    /**
     * Sign a SigV4a request and return its modified HttpRequest. See SigV4a wiki for implementation details
     * @param requestToSign HttpRequest to sign
     * @param signingDate Signing date (uses UTC now if not specified)
     * @param signableHeaders Headers to include in the signing process
     * @param unsignableHeaders Headers to not include in the signing process
     * @param signingRegion Region to sign the request for. '*' can be used as a wildcard. Falls back to constructor value
     * @param signingService Service to sign for
     * @private
     */
    private signRequest;
    /**
     *
     * @param privateKey Calculated private key
     * @param stringToSign String to sign using private key
     * @private
     */
    private GetSignature;
}
